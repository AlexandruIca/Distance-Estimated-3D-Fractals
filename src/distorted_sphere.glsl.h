#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i src/distorted_sphere.glsl -o src/distorted_sphere.glsl.h -l glsl330

    Overview:

        Shader program 'quad':
            Get shader desc: quad_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
            Fragment shader: fs


    Shader descriptor structs:

        sg_shader quad = sg_make_shader(quad_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


*/
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <string.h>
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_vs_position (0)
/*
    #version 330

    layout(location = 0) in vec2 position;
    out vec4 color;

    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
        color = vec4(0.699999988079071044921875, 0.20000000298023223876953125, 0.4000000059604644775390625, 1.0);
    }

*/
static const char vs_source_glsl330[242] = {
    0x23,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x33,
    0x33,
    0x30,
    0x0a,
    0x0a,
    0x6c,
    0x61,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x28,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x3d,
    0x20,
    0x30,
    0x29,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x76,
    0x65,
    0x63,
    0x32,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3b,
    0x0a,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x76,
    0x65,
    0x63,
    0x34,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3b,
    0x0a,
    0x0a,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x20,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x28,
    0x29,
    0x0a,
    0x7b,
    0x0a,
    0x20,
    0x20,
    0x20,
    0x20,
    0x67,
    0x6c,
    0x5f,
    0x50,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x3d,
    0x20,
    0x76,
    0x65,
    0x63,
    0x34,
    0x28,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2c,
    0x20,
    0x30,
    0x2e,
    0x30,
    0x2c,
    0x20,
    0x31,
    0x2e,
    0x30,
    0x29,
    0x3b,
    0x0a,
    0x20,
    0x20,
    0x20,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x20,
    0x3d,
    0x20,
    0x76,
    0x65,
    0x63,
    0x34,
    0x28,
    0x30,
    0x2e,
    0x36,
    0x39,
    0x39,
    0x39,
    0x39,
    0x39,
    0x39,
    0x38,
    0x38,
    0x30,
    0x37,
    0x39,
    0x30,
    0x37,
    0x31,
    0x30,
    0x34,
    0x34,
    0x39,
    0x32,
    0x31,
    0x38,
    0x37,
    0x35,
    0x2c,
    0x20,
    0x30,
    0x2e,
    0x32,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x32,
    0x39,
    0x38,
    0x30,
    0x32,
    0x33,
    0x32,
    0x32,
    0x33,
    0x38,
    0x37,
    0x36,
    0x39,
    0x35,
    0x33,
    0x31,
    0x32,
    0x35,
    0x2c,
    0x20,
    0x30,
    0x2e,
    0x34,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x35,
    0x39,
    0x36,
    0x30,
    0x34,
    0x36,
    0x34,
    0x34,
    0x37,
    0x37,
    0x35,
    0x33,
    0x39,
    0x30,
    0x36,
    0x32,
    0x35,
    0x2c,
    0x20,
    0x31,
    0x2e,
    0x30,
    0x29,
    0x3b,
    0x0a,
    0x7d,
    0x0a,
    0x0a,
    0x00,
};
/*
    #version 330

    layout(location = 0) out vec4 frag_color;
    in vec4 color;

    void main()
    {
        frag_color = color;
    }

*/
static const char fs_source_glsl330[114] = {
    0x23,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x33,
    0x33,
    0x30,
    0x0a,
    0x0a,
    0x6c,
    0x61,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x28,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x3d,
    0x20,
    0x30,
    0x29,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x76,
    0x65,
    0x63,
    0x34,
    0x20,
    0x66,
    0x72,
    0x61,
    0x67,
    0x5f,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3b,
    0x0a,
    0x69,
    0x6e,
    0x20,
    0x76,
    0x65,
    0x63,
    0x34,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3b,
    0x0a,
    0x0a,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x20,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x28,
    0x29,
    0x0a,
    0x7b,
    0x0a,
    0x20,
    0x20,
    0x20,
    0x20,
    0x66,
    0x72,
    0x61,
    0x67,
    0x5f,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x20,
    0x3d,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3b,
    0x0a,
    0x7d,
    0x0a,
    0x0a,
    0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before distorted_sphere.glsl.h"
#endif
static inline const sg_shader_desc* quad_shader_desc(sg_backend backend)
{
    if (backend == SG_BACKEND_GLCORE33) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "position";
            desc.vs.source = vs_source_glsl330;
            desc.vs.entry = "main";
            desc.fs.source = fs_source_glsl330;
            desc.fs.entry = "main";
            desc.label = "quad_shader";
        }
        return &desc;
    }
    return 0;
}
